import axios from 'axios'
import { useAuthStore } from '../stores/auth/authStore'

// === CSRF TOKEN MANAGEMENT ===

// H√†m l·∫•y CSRF token m·ªõi t·ª´ server
export const refreshCsrfToken = async () => {
  try {
    // G·ªçi ƒë·∫øn route csrf c·ªßa Laravel ƒë·ªÉ l·∫•y token m·ªõi
    const response = await axios.get('/sanctum/csrf-cookie', {
      withCredentials: true // Quan tr·ªçng ƒë·ªÉ cookies ƒë∆∞·ª£c l∆∞u
    })
    
    // L·∫•y token t·ª´ cookie ƒë·ªÉ c·∫≠p nh·∫≠t header
    const cookies = document.cookie.split(';')
    const xsrfCookie = cookies.find(cookie => cookie.trim().startsWith('XSRF-TOKEN='))
    
    if (xsrfCookie) {
      const token = decodeURIComponent(xsrfCookie.trim().substring('XSRF-TOKEN='.length))
      axios.defaults.headers.common['X-XSRF-TOKEN'] = token
      apiClient.defaults.headers.common['X-XSRF-TOKEN'] = token
      console.log('‚úÖ CSRF token ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng')
      return token
    } else {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y XSRF-TOKEN cookie sau khi refresh')
      return null
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t CSRF token:', error)
    return null
  }
}

// H√†m ƒë·ªÉ l·∫•y CSRF token t·ª´ cookie
export const getCsrfTokenFromCookie = () => {
  const cookies = document.cookie.split(';')
  const xsrfCookie = cookies.find(cookie => cookie.trim().startsWith('XSRF-TOKEN='))
  
  if (xsrfCookie) {
    return decodeURIComponent(xsrfCookie.trim().substring('XSRF-TOKEN='.length))
  }
  
  return null
}

// === API CLIENT CONFIGURATION ===

// T·∫°o instance axios v·ªõi c·∫•u h√¨nh cho DOUBLE PROTECTION (CSRF + Sanctum)
const apiClient = axios.create({
  baseURL: '/api', // Base URL c·ªßa API
  timeout: 30000, // Timeout m·∫∑c ƒë·ªãnh l√† 30 gi√¢y
  withCredentials: true, // QUAN TR·ªåNG: Cookies ƒë∆∞·ª£c g·ª≠i trong m·ªçi request cho CSRF
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  }
})

// === REQUEST INTERCEPTOR - DOUBLE PROTECTION ===
apiClient.interceptors.request.use(
  config => {
    console.log(`üîê Double Protection Request: ${config.method?.toUpperCase()} ${config.url}`)
    
    // === 1. SANCTUM TOKEN PROTECTION ===
    let token = null;
    
    // Ki·ªÉm tra trong local storage
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      token = storedToken;
    }
    
    // Ki·ªÉm tra trong session storage n·∫øu kh√¥ng c√≥ trong local storage
    if (!token) {
      const sessionToken = sessionStorage.getItem('token');
      if (sessionToken) {
        token = sessionToken;
      }
    }
    
    // Th√™m Bearer token v√†o header n·∫øu c√≥
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Sanctum Bearer token added to request')
    }
    
    // === 2. CSRF TOKEN PROTECTION ===
    const csrfToken = getCsrfTokenFromCookie();
    if (csrfToken) {
      config.headers['X-XSRF-TOKEN'] = csrfToken;
      console.log('üõ°Ô∏è CSRF token added to request')
    } else {
      console.warn('‚ö†Ô∏è No CSRF token found - this may cause 419 errors for protected endpoints')
    }
    
    return config;
  },
  error => {
    console.error('‚ùå Request interceptor error:', error)
    return Promise.reject(error);
  }
);

// === RESPONSE INTERCEPTOR - ERROR HANDLING ===
apiClient.interceptors.response.use(
  response => {
    console.log(`‚úÖ Double Protection Response: ${response.status} ${response.config.url}`)
    return response;
  },
  async error => {
    const status = error.response?.status
    const url = error.config?.url
    console.error(`‚ùå API Error: ${status} ${url}`, error.message);
    
    // === 1. X·ª¨ L√ù L·ªñI CSRF TOKEN MISMATCH (419) ===
    if (status === 419) {
      console.log('üõ°Ô∏è CSRF token mismatch detected. Attempting to refresh...');
      
      // L∆∞u l·∫°i request g·ªëc
      const originalRequest = error.config;
      
      // ƒê·∫£m b·∫£o kh√¥ng l·∫∑p v√¥ h·∫°n
      if (!originalRequest._retry) {
        originalRequest._retry = true;
        
        try {
          // L·∫•y CSRF token m·ªõi
          const newToken = await refreshCsrfToken();
          
          if (newToken) {
            // C·∫≠p nh·∫≠t header v·ªõi token m·ªõi
            originalRequest.headers['X-XSRF-TOKEN'] = newToken;
            
            // Th·ª≠ l·∫°i request ban ƒë·∫ßu v·ªõi token m·ªõi
            console.log('üîÑ Retrying request with new CSRF token...')
            return apiClient(originalRequest);
          } else {
            console.error('‚ùå Failed to refresh CSRF token')
          }
        } catch (refreshError) {
          console.error('‚ùå Error refreshing CSRF token:', refreshError);
        }
      } else {
        console.error('‚ùå Already retried CSRF token refresh - giving up')
      }
    }
    
    // === 2. X·ª¨ L√ù L·ªñI VALIDATION (422) ===
    if (status === 422) {
      console.log('üìù Validation error:', error.response.data);
      
      // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho API check khi ƒë√£ ƒëƒÉng nh·∫≠p qua Google
      if (url === '/check' && (localStorage.getItem('token') || sessionStorage.getItem('token'))) {
        console.log('üîç Auth check validation error for Google login - returning cached user data');
        return Promise.resolve({
          data: {
            authenticated: true,
            user: JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || '{}')
          }
        });
      }
    }
    
    // === 3. X·ª¨ L√ù L·ªñI SANCTUM AUTHENTICATION (401/403) ===
    if (status === 401 || status === 403) {
      console.log(`üîë Sanctum authentication error: ${status}`);
      
      // X·ª≠ l√Ω ƒëƒÉng xu·∫•t b·∫±ng c√°ch x√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng
      try {
        // Fallback n·∫øu kh√¥ng th·ªÉ s·ª≠ d·ª•ng authStore
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        sessionStorage.removeItem('token');
        sessionStorage.removeItem('user');
        
        // Ch·ªâ th·ª≠ d√πng authStore n·∫øu g·ªçi api b·∫Øt bu·ªôc ƒëƒÉng nh·∫≠p
        if (!url?.includes('notifications') && !url?.includes('/user')) {
          try {
            const auth = useAuthStore();
            if (auth && typeof auth.clearAuthData === 'function') {
              auth.clearAuthData();
              console.log('üßπ Auth data cleared via authStore');
            }
          } catch (authError) {
            console.log('‚ö†Ô∏è Cannot use authStore:', authError);
          }
        }
      } catch (e) {
        console.error('‚ùå Error handling clearAuthData:', e);
      }
      
      return Promise.reject(error);
    }
    
    return Promise.reject(error);
  }
);

export default apiClient
